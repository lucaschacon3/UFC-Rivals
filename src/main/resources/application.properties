# Nombre de la aplicacion
spring.application.name=web

# bbdd heroku
spring.datasource.url=${db_url}
spring.datasource.username=${db_username}
spring.datasource.password=${db_password}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update

# Configuracion de H2 en memoria para desarrollo
#spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password

# Usando la ubicacion personalizada
#spring.sql.init.schema-locations=classpath:db/schema.sql
#spring.sql.init.data-locations=classpath:db/data.sql

# Hibernate dialect para H2
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Habilitar el uso del H2 console para ver y administrar la base de datos
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console


server.port=80

#Google Auth2
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# keys
spring.security.oauth2.client.registration.google.client-id=${id_google}
spring.security.oauth2.client.registration.google.client-secret=${secret_google}
openai.api.key=${gpt_key}


