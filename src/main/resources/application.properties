# Nombre de la aplicacion
spring.application.name=web

# Configuracion de H2 en memoria para desarrollo
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# Usando la ubicacion personalizada
spring.sql.init.schema-locations=classpath:db/schema.sql
spring.sql.init.data-locations=classpath:db/data.sql


# Hibernate dialect para H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Habilitar el uso del H2 console para ver y administrar la base de datos
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Configurar el modo de inicializacion de la base de datos (opcional)
spring.jpa.hibernate.ddl-auto=update

server.port=80

#Google Auth2
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost/login/oauth2/code/google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

#spring.config.import=optional:classpath:application-secrets.properties

# keys
spring.security.oauth2.client.registration.google.client-id=${id_google}
spring.security.oauth2.client.registration.google.client-secret=${secret_google}
openai.api.key=${gpt_key}


